gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
?split.screen
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
q()
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
# Returns the total variation distance between two binomial distributions, with parameters
# (n, p1) and (n, p2), respectively.
total_variation_distance <- function(n, p1, p2) {
summands <- sapply(0:n, function(x) {
abs(dbinom(x, n, p1) - dbinom(x, n, p2))
})
sum(summands) / 2
}
# Returns an observation from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling <- function(n, p1, p2) {
tvd <- total_variation_distance(n, p1, p2)
p <- 1 - tvd
flip <- dbinom(1, 1, p)
if (flip == 1) {
# Generate Z according to distribution gamma_III and set X = Y = Z.
gamma_III <- function() {
probs <- sapply(0:n, function(x) {
min(dbinom(x, n, p1), dbinom(x, n, p2)) / p
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
z <- gamma_III()
return(c(z, z))
} else {
# Generate X according to the distribution gamma_I.
gamma_I <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(mu > nu, (mu - nu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
x <- gamma_I()
# Generate Y according to the distribution gamma_II.
gamma_II <- function() {
probs <- sapply(0:n, function(x) {
mu <- dbinom(x, n, p1)
nu <- dbinom(x, n, p2)
ifelse(nu > mu, (nu - mu) / tvd, 0)
})
sample(0:n, size=1, replace=TRUE, prob=probs)
}
y <- gamma_II()
return(c(x, y))
}
}
# Plot N observations from the optimal coupling distribution between two binomial distributions,
# with parameters (n, p1) and (n, p2), respectively.
optimal_coupling_plot <- function(N, n, p1, p2) {
values <- replicate(N, optimal_coupling(n, p1, p2))
x <- values[1, ]
y <- values[2, ]
colors <- ifelse(x == y, "red", "black")
# The plot adds a bit of jitter to the observations to help prevent overlap.
plot(jitter(x), jitter(y), xlim=c(0, n), ylim=c(0, n), col=colors)
}
# Generate plots of observations from the optimal coupling distribution between a bin(20, 0.4)
# and a bin(20, 0.6) distribution.
# (Not the most elegant formatting...)
N <- 100
opar <- par(no.readonly=TRUE)
par(mfrow=c(5, 5), mar=c(1.5, 1.5, 1.5, 1.5), oma=c(1, 1, 1, 1))
for (i in 1:25)
optimal_coupling_plot(N, 20, 0.4, 0.6)
par(opar)
